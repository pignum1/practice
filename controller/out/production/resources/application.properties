#datasource
spring.datasource.url=jdbc:mysql://localhost:3306/weixy?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.datasource.dbcp.max-wait=300
#是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。
#create,每次加载hibernate的时候会删除上一次的表重新生成
#create-drop 每次加载hebernate时根据model类生成表
#update 第一次加载hibernate会根据model的结构来建立表，以后加载时即使表结构改变单表中的行仍然存在不会删除以前的行。
#validate 每次加载hibernate时，验证数据库表结构，会对表进行比较，不会创建新表

# 基础信息配置
spring.application.name=practice
server.port=5681

eureka.client.service-url.defaultZone=http://localhost:5678/eureka/


#注册中心上ip地址显示
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}


#配置eureka上的status 为  swaggerui
eureka.instance.status-page-url=http://${spring.cloud.client.ipAddress}:${server.port}/swagger-ui.html

#设置服务注销事件(秒)
eureka.instance.lease-renewal-interval-in-seconds=5
eureka.instance.lease-expiration-duration-in-seconds=10


#邮件发送信息
spring.mail.host=smtp.qq.com
spring.mail.username=邮箱账号
spring.mail.password=验证密码
spring.mail.default-encoding=UTF-8
#这里填写端口号为 465或则为 587
spring.mail.port=465
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.debug=true

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=47.102.99.93
# Redis服务器连接端口
spring.redis.port=6379
#客户端超时时间单位是毫秒 默认是2000
spring.redis.timeout=10000
#最大空闲数
spring.redis.maxIdle=300
#连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal
#redis.maxActive=600
#控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
spring.redis.maxTotal=1000
#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
spring.redis.maxWaitMillis=1000
#连接的最小空闲时间 默认1800000毫秒(30分钟)
spring.redis.minEvictableIdleTimeMillis=300000
#每次释放连接的最大数目,默认3
spring.redis.numTestsPerEvictionRun=1024
#逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
spring.redis.timeBetweenEvictionRunsMillis=30000
#是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
spring.redis.testOnBorrow=true
#在空闲时检查有效性, 默认false


#MongoDB
#spring.data.mongodb.username=root
#spring.data.mongodb.password=
#spring.data.mongodb.host=47.102.99.93
#spring.data.mongodb.repositories.enabled=true
#spring.data.mongodb.database=cloud
#spring.data.mongodb.port=27017

spring.data.mongodb.uri=mongodb://47.102.99.93:27017/cloud

spring.data.mongodb.database=cloud



spring.http.multipart.maxFileSize=10Mb
spring.http.multipart.maxRequestSize=100Mb


## 设定 flyway 属性
# flyway 的 clean 命令会删除指定 schema 下的所有 table, 杀伤力太大了, 应该禁掉.
flyway.enabled = true
# 启用或禁用 flyway
flyway.locations =classpath:/db.migration
# 设定 SQL 脚本的目录,多个路径使用逗号分隔, 比如取值为 classpath:db/migration,filesystem:/sql-migrations
flyway.baselineOnMigrate=true
# 如果指定 schema 包含了其他表,但没有 flyway schema history 表的话, 在执行 flyway migrate 命令之前, 必须先执行 flyway baseline 命令.
# 设置 spring.flyway.baseline-on-migrate 为 true 后, flyway 将在需要 baseline 的时候, 自动执行一次 baseline.
flyway.baselineVersion=1
# 指定 baseline 的版本号,缺省值为 1, 低于该版本号的 SQL 文件, migrate 的时候被忽略.
#spring.flyway.encoding=
# Encoding of SQL migrations (default: UTF-8)
flyway.table=flyway_schema_history_myapp
# 设定 flyway 的 metadata 表名, 缺省为 flyway_schema_history
flyway.outOfOrder=true
# 开发环境最好开启 outOfOrder, 生产环境关闭 outOfOrder .
#spring.flyway.schemas=
# 需要 flyway 管控的 schema list, 缺省的话, 使用的时 dbsource.connection直连上的那个 schema, 可以指定多个schema, 但仅会在第一个schema下建立 metadata 表, 也仅在第一个schema应用migration sql 脚本. 但flyway Clean 命令会依次在这些schema下都执行一遍.